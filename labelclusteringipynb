{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyM4abAxBK68406z65csSzEu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ABChaeeun/ITB_Project/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# label = 대여구분코드"
      ],
      "metadata": {
        "id": "cecse1yIEa4e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!sudo apt-get install -y fonts-nanum\n",
        "!sudo fc-cache -fv\n",
        "!rm ~/.cache/matplotlib -rf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NMuOcB7OzOB8",
        "outputId": "92522c4e-3398-4a0a-f152-dbabefde908b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-460\n",
            "Use 'sudo apt autoremove' to remove it.\n",
            "The following NEW packages will be installed:\n",
            "  fonts-nanum\n",
            "0 upgraded, 1 newly installed, 0 to remove and 11 not upgraded.\n",
            "Need to get 9,604 kB of archives.\n",
            "After this operation, 29.5 MB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 fonts-nanum all 20170925-1 [9,604 kB]\n",
            "Fetched 9,604 kB in 2s (5,387 kB/s)\n",
            "debconf: unable to initialize frontend: Dialog\n",
            "debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 1.)\n",
            "debconf: falling back to frontend: Readline\n",
            "debconf: unable to initialize frontend: Readline\n",
            "debconf: (This frontend requires a controlling tty.)\n",
            "debconf: falling back to frontend: Teletype\n",
            "dpkg-preconfigure: unable to re-open stdin: \n",
            "Selecting previously unselected package fonts-nanum.\n",
            "(Reading database ... 124013 files and directories currently installed.)\n",
            "Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n",
            "Unpacking fonts-nanum (20170925-1) ...\n",
            "Setting up fonts-nanum (20170925-1) ...\n",
            "Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n",
            "/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n",
            "/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n",
            "/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/nanum: caching, new cache contents: 10 fonts, 0 dirs\n",
            "/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n",
            "/root/.local/share/fonts: skipping, no such directory\n",
            "/root/.fonts: skipping, no such directory\n",
            "/var/cache/fontconfig: cleaning cache directory\n",
            "/root/.cache/fontconfig: not cleaning non-existent cache directory\n",
            "/root/.fontconfig: not cleaning non-existent cache directory\n",
            "fc-cache: succeeded\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rc('font', family='NanumBarunGothic')"
      ],
      "metadata": {
        "id": "M4vAQYtXzSyK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "metadata": {
        "id": "-if4rlf9s1_L"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "go1MgH5csZHa",
        "outputId": "80f19fda-701d-4735-a010-d064dbb31f1f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   월  대여소번호         대여소명  대여구분  성별  연령대코드  이용건수      운동량   탄소량      이동거리  \\\n",
              "0  1    800  800. 목월공원 앞     0   1      4     2   176.71  1.38   5949.60   \n",
              "1  1    800  800. 목월공원 앞     1   0      0     2   120.28  1.08   4672.74   \n",
              "2  1    800  800. 목월공원 앞     2   0      1     6   535.00  4.34  18764.02   \n",
              "3  1    800  800. 목월공원 앞     2   0      2    14  1097.91  9.42  40631.75   \n",
              "4  1    800  800. 목월공원 앞     2   0      3     5   178.77  1.51   6497.15   \n",
              "\n",
              "   이용시간  연령구분  \n",
              "0   120     0  \n",
              "1    58     0  \n",
              "2   570     0  \n",
              "3   379     1  \n",
              "4   140     1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b25f8ab-0935-427d-a0ff-1a51d20cc1f2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>월</th>\n",
              "      <th>대여소번호</th>\n",
              "      <th>대여소명</th>\n",
              "      <th>대여구분</th>\n",
              "      <th>성별</th>\n",
              "      <th>연령대코드</th>\n",
              "      <th>이용건수</th>\n",
              "      <th>운동량</th>\n",
              "      <th>탄소량</th>\n",
              "      <th>이동거리</th>\n",
              "      <th>이용시간</th>\n",
              "      <th>연령구분</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>176.71</td>\n",
              "      <td>1.38</td>\n",
              "      <td>5949.60</td>\n",
              "      <td>120</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>120.28</td>\n",
              "      <td>1.08</td>\n",
              "      <td>4672.74</td>\n",
              "      <td>58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>535.00</td>\n",
              "      <td>4.34</td>\n",
              "      <td>18764.02</td>\n",
              "      <td>570</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>1097.91</td>\n",
              "      <td>9.42</td>\n",
              "      <td>40631.75</td>\n",
              "      <td>379</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>178.77</td>\n",
              "      <td>1.51</td>\n",
              "      <td>6497.15</td>\n",
              "      <td>140</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b25f8ab-0935-427d-a0ff-1a51d20cc1f2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8b25f8ab-0935-427d-a0ff-1a51d20cc1f2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8b25f8ab-0935-427d-a0ff-1a51d20cc1f2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "url = \"https://raw.githubusercontent.com/ABChaeeun/ITB_Project/main/data/data.csv\"\n",
        "data = pd.read_csv(url)\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.drop('연령구분', axis = 1)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "s6IO9Ozdtkip",
        "outputId": "f81f4bf7-3e72-4745-9f1e-a0639dd23055"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       월  대여소번호           대여소명  대여구분  성별  연령대코드  이용건수      운동량    탄소량  \\\n",
              "0      1    800    800. 목월공원 앞     0   1      4     2   176.71   1.38   \n",
              "1      1    800    800. 목월공원 앞     1   0      0     2   120.28   1.08   \n",
              "2      1    800    800. 목월공원 앞     2   0      1     6   535.00   4.34   \n",
              "3      1    800    800. 목월공원 앞     2   0      2    14  1097.91   9.42   \n",
              "4      1    800    800. 목월공원 앞     2   0      3     5   178.77   1.51   \n",
              "...   ..    ...            ...   ...  ..    ...   ...      ...    ...   \n",
              "22077  6   4639  4639. 동빙고근린공원     3   1      3     8   686.79   5.67   \n",
              "22078  6   4639  4639. 동빙고근린공원     3   1      4    15  2900.89  22.47   \n",
              "22079  6   4639  4639. 동빙고근린공원     3   1      5     9  1600.71  14.41   \n",
              "22080  6   4639  4639. 동빙고근린공원     3   1      6     1    37.39   0.32   \n",
              "22081  6   4639  4639. 동빙고근린공원     3   1      0     3   374.98   2.72   \n",
              "\n",
              "           이동거리  이용시간  \n",
              "0       5949.60   120  \n",
              "1       4672.74    58  \n",
              "2      18764.02   570  \n",
              "3      40631.75   379  \n",
              "4       6497.15   140  \n",
              "...         ...   ...  \n",
              "22077  24405.69   344  \n",
              "22078  96820.20   566  \n",
              "22079  62087.24   459  \n",
              "22080   1388.41     9  \n",
              "22081  11740.54   106  \n",
              "\n",
              "[22082 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f76b9979-1e4f-40cb-a062-7bbfe0572a7a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>월</th>\n",
              "      <th>대여소번호</th>\n",
              "      <th>대여소명</th>\n",
              "      <th>대여구분</th>\n",
              "      <th>성별</th>\n",
              "      <th>연령대코드</th>\n",
              "      <th>이용건수</th>\n",
              "      <th>운동량</th>\n",
              "      <th>탄소량</th>\n",
              "      <th>이동거리</th>\n",
              "      <th>이용시간</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>176.71</td>\n",
              "      <td>1.38</td>\n",
              "      <td>5949.60</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>120.28</td>\n",
              "      <td>1.08</td>\n",
              "      <td>4672.74</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>535.00</td>\n",
              "      <td>4.34</td>\n",
              "      <td>18764.02</td>\n",
              "      <td>570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>1097.91</td>\n",
              "      <td>9.42</td>\n",
              "      <td>40631.75</td>\n",
              "      <td>379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>178.77</td>\n",
              "      <td>1.51</td>\n",
              "      <td>6497.15</td>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22077</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>686.79</td>\n",
              "      <td>5.67</td>\n",
              "      <td>24405.69</td>\n",
              "      <td>344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22078</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>15</td>\n",
              "      <td>2900.89</td>\n",
              "      <td>22.47</td>\n",
              "      <td>96820.20</td>\n",
              "      <td>566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22079</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>1600.71</td>\n",
              "      <td>14.41</td>\n",
              "      <td>62087.24</td>\n",
              "      <td>459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22080</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>37.39</td>\n",
              "      <td>0.32</td>\n",
              "      <td>1388.41</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22081</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>374.98</td>\n",
              "      <td>2.72</td>\n",
              "      <td>11740.54</td>\n",
              "      <td>106</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>22082 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f76b9979-1e4f-40cb-a062-7bbfe0572a7a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f76b9979-1e4f-40cb-a062-7bbfe0572a7a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f76b9979-1e4f-40cb-a062-7bbfe0572a7a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['대여구분'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8jEyHarRtNLw",
        "outputId": "1f757203-67d3-4847-ad5e-f2ade7afce8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3    11077\n",
              "2     8557\n",
              "0     1817\n",
              "1      631\n",
              "Name: 대여구분, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = data[['월', '대여소번호','성별', '이용건수', '운동량', '탄소량', '이동거리', '이용시간']]\n",
        "y = data['대여구분']"
      ],
      "metadata": {
        "id": "_V46_DRLtHV3"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# train / test 데이터셋 나누기\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test=train_test_split(X, y, stratify=y, random_state=42)"
      ],
      "metadata": {
        "id": "jKYrsirLt5En"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1YrPw448t4-r",
        "outputId": "c6011027-3ad3-4df0-ee10-ad8a6f7f9fb0"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(16561, 8) (5521, 8) (16561,) (5521,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Random Forest"
      ],
      "metadata": {
        "id": "tVaK6i2-uKJ7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from scipy.stats import randint\n",
        "param_distribs = {'n_estimators': randint(low=100, high=1000), \n",
        "                  'max_features': ['auto', 'sqrt', 'log2']}\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "random_search=RandomizedSearchCV(RandomForestClassifier(), \n",
        "                                 param_distributions=param_distribs, cv=5, return_train_score=True)"
      ],
      "metadata": {
        "id": "KAfNrwtpvzh-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random_search.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QteaV0alv4Y4",
        "outputId": "fa4b6e5b-0ee8-4d18-a2b0-255a66345572"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(),\n",
              "                   param_distributions={'max_features': ['auto', 'sqrt',\n",
              "                                                         'log2'],\n",
              "                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f9f73d202b0>},\n",
              "                   return_train_score=True)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best Parameter: {}\".format(random_search.best_params_))\n",
        "print(\"Best Cross-validity Score: {:.3f}\".format(random_search.best_score_))\n",
        "print(\"Test set Score: {:.3f}\".format(random_search.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xCvuoqHquQXG",
        "outputId": "5efb6061-06ed-4744-e25d-9ccea1331d05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameter: {'max_features': 'log2', 'n_estimators': 508}\n",
            "Best Cross-validity Score: 0.625\n",
            "Test set Score: 0.627\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result_random = random_search.cv_results_"
      ],
      "metadata": {
        "id": "F3KyoMkSud2k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(result_random['param_max_features'], \n",
        "         result_random['mean_train_score'], label=\"Train\")\n",
        "plt.plot(result_random['param_max_features'], \n",
        "         result_random['mean_test_score'], label=\"Test\")\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "Tnku_tRYuQTg",
        "outputId": "92a78192-41be-480c-8632-820a1eda7ad1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f9f6b18c580>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(result_random['param_n_estimators'], \n",
        "         result_random['mean_train_score'], label=\"Train\")\n",
        "plt.plot(result_random['param_n_estimators'], \n",
        "         result_random['mean_test_score'], label=\"Test\")\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "uWWw36KR11Qu",
        "outputId": "d1ac2829-3351-4b7d-cbc9-dc02a96672a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f9f69a21d60>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 변수 중요도 시각화\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "Forest=RandomForestClassifier(max_features='log2', n_estimators=478)\n",
        "Forest.fit(X_train, y_train)\n",
        "print(\"특성 중요도:\\n{}\".format(Forest.feature_importances_))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "slfyos_4uQLC",
        "outputId": "2d7426b5-1a29-4df7-b9f5-068d8bebc732"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "특성 중요도:\n",
            "[0.05796286 0.13741753 0.03205331 0.15226001 0.15747878 0.13124975\n",
            " 0.14536201 0.18621574]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "def plot_feature_importances_Forest(model):\n",
        "    n_features = X.shape[1]\n",
        "    plt.barh(range(n_features), model.feature_importances_, align='center')\n",
        "    plt.yticks(np.arange(n_features), X.columns)\n",
        "    plt.xlabel(\"Importance\")\n",
        "    plt.ylabel(\"Features\")\n",
        "    plt.ylim(-1, n_features)\n",
        "plot_feature_importances_Forest(Forest)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "XvGSrrqvwMi5",
        "outputId": "13db007a-0ff3-41b9-dc9e-d48e2648b308"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family ['NanumBarunGothic'] not found. Falling back to DejaVu Sans.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 모델평가\n",
        "from sklearn.metrics import confusion_matrix\n",
        "pred_train=Forest.predict(X_train)\n",
        "confusion_train=confusion_matrix(y_train, pred_train)\n",
        "print(\"훈련데이터 오차행렬:\\n\", confusion_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UAyGG8NowMfJ",
        "outputId": "adf1da38-e1cf-4a9c-c5f2-f645dc797908"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "훈련데이터 오차행렬:\n",
            " [[1363    0    0    0]\n",
            " [   0  473    0    0]\n",
            " [   0    0 6418    0]\n",
            " [   0    0    0 8307]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred_test=Forest.predict(X_test)\n",
        "confusion_test=confusion_matrix(y_test, pred_test)\n",
        "print(\"테스트 데이터 오차행렬:\\n\", confusion_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "durgtOSUwV5-",
        "outputId": "ec56ae7b-a261-4ea8-92f1-cf7de06db098"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "테스트 데이터 오차행렬:\n",
            " [[  86    0  287   81]\n",
            " [   2   20  109   27]\n",
            " [  43   17 1343  736]\n",
            " [  27    5  722 2016]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import f1_score\n",
        "f1=f1_score(y_test, pred_test, average=\"micro\" )\n",
        "f2=f1_score(y_test, pred_test, average=\"macro\" )\n",
        "print(\"micro f1 score:\\n\", f1)\n",
        "print(\"macro f1 score:\\n\", f2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IARCP0spwVwm",
        "outputId": "9fe6278f-8ffc-4a61-efcb-39cc49a3b49e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "micro f1 score:\n",
            " 0.627603694982793\n",
            "macro f1 score:\n",
            " 0.4452805513535504\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "cfreport=classification_report(y_test, pred_test)\n",
        "print(\"분류예측 레포트:\\n\", cfreport)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OTI3gCNfwYXo",
        "outputId": "5d65ddac-3f68-4dcf-f6a7-660ffd63acc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "분류예측 레포트:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.54      0.19      0.28       454\n",
            "           1       0.48      0.13      0.20       158\n",
            "           2       0.55      0.63      0.58      2139\n",
            "           3       0.70      0.73      0.72      2770\n",
            "\n",
            "    accuracy                           0.63      5521\n",
            "   macro avg       0.57      0.42      0.45      5521\n",
            "weighted avg       0.62      0.63      0.61      5521\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Gradient Boosting"
      ],
      "metadata": {
        "id": "SGs71tQd-zQj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "# 기본값은 max_depth= 3, n_estimators=100, learning_rate = 0.1\n",
        "\n",
        "gbrt = GradientBoostingClassifier(random_state=0)\n",
        "gbrt.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P3k9wrBp-jBQ",
        "outputId": "a4a40a49-026e-421d-d8c8-b1756cd33e24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GradientBoostingClassifier(random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"학습용 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_train, y_train))) # 과적합\n",
        "print(\"시험용 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XNSu270A-8Y8",
        "outputId": "6a77e7da-ccb2-4534-c592-fc083b533892"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "학습용 데이터 세트 정확도: 0.659\n",
            "시험용 데이터 세트 정확도: 0.634\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result = gbrt.feature_importances_\n",
        "print(\"변수의 중요도:\\n\", result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_eXv108F_bqk",
        "outputId": "74fc53b3-af1e-480e-b066-3c59cd1e5b6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "변수의 중요도:\n",
            " [0.05302565 0.03968054 0.03614801 0.50327481 0.03373911 0.02386451\n",
            " 0.04904292 0.26122444]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_feature_importances_gbrt(model):\n",
        "    n_features = X.shape[1]\n",
        "    plt.barh(range(n_features), model.feature_importances_, align='center')\n",
        "    plt.yticks(np.arange(n_features), X.columns)\n",
        "    plt.xlabel(\"Importance\")\n",
        "    plt.ylabel(\"Features\")\n",
        "    plt.ylim(-1, n_features)\n",
        "plot_feature_importances_gbrt(gbrt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "CoXTZ83O_kQ3",
        "outputId": "38fe8005-3cec-4f00-c01b-700f7638d610"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 나무 깊이 제한\n",
        "gbrt = GradientBoostingClassifier(random_state=0, max_depth=5)\n",
        "gbrt.fit(X_train, y_train)\n",
        "\n",
        "print(\"학습 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_train, y_train)))\n",
        "print(\"시험용 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "00339w-BAJjv",
        "outputId": "61e2bffc-327d-4a14-de16-83c017fdd011"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "학습 데이터 세트 정확도: 0.741\n",
            "시험용 데이터 세트 정확도: 0.643\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.metrics import confusion_matrix \n",
        "gbrt_pred = gbrt.predict(X_test)\n",
        "print('Gradient boosting 시험용 데이터 세트 정확도:{:.3f}'.format(accuracy_score(y_test, grid_gbrt_pred)))\n",
        "print(confusion_matrix(y_test, gbrt_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F-GTYNRmAIg4",
        "outputId": "63ac9cde-b060-448c-ced6-520c16d3bc6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gradient boosting 시험용 데이터 세트 정확도:0.643\n",
            "[[ 115    0  281   58]\n",
            " [   1   17  112   28]\n",
            " [  53   15 1442  629]\n",
            " [  43    1  750 1976]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Gradient Boosting:\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PdS74YAlBB67",
        "outputId": "2d9ba7e5-b0e6-41f9-df28-d3ba9f4488c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gradient Boosting:\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, gbrt_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vnjdjRk3BNOB",
        "outputId": "0ebeefe0-4cb1-49e0-e884-f2573e8e2a46"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.54      0.25      0.35       454\n",
            "           1       0.52      0.11      0.18       158\n",
            "           2       0.56      0.67      0.61      2139\n",
            "           3       0.73      0.71      0.72      2770\n",
            "\n",
            "    accuracy                           0.64      5521\n",
            "   macro avg       0.59      0.44      0.46      5521\n",
            "weighted avg       0.64      0.64      0.63      5521\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "대여구분코드 = 0이나 1인 f1-score기 닞은 이유 = 애초에 0,1인 데이터가 많이 없음."
      ],
      "metadata": {
        "id": "gPZvNjMIEJTV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# label = 이용건수"
      ],
      "metadata": {
        "id": "h8pxYg2HEg2l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Zj4wTFAPETjs",
        "outputId": "a8e39269-a023-4e58-8fa2-377757cb4180"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   월  대여소번호         대여소명  대여구분  성별  연령대코드  이용건수      운동량   탄소량      이동거리  이용시간\n",
              "0  1    800  800. 목월공원 앞     0   1      4     2   176.71  1.38   5949.60   120\n",
              "1  1    800  800. 목월공원 앞     1   0      0     2   120.28  1.08   4672.74    58\n",
              "2  1    800  800. 목월공원 앞     2   0      1     6   535.00  4.34  18764.02   570\n",
              "3  1    800  800. 목월공원 앞     2   0      2    14  1097.91  9.42  40631.75   379\n",
              "4  1    800  800. 목월공원 앞     2   0      3     5   178.77  1.51   6497.15   140"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2682fdea-5770-456f-9226-8c0305ce8573\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>월</th>\n",
              "      <th>대여소번호</th>\n",
              "      <th>대여소명</th>\n",
              "      <th>대여구분</th>\n",
              "      <th>성별</th>\n",
              "      <th>연령대코드</th>\n",
              "      <th>이용건수</th>\n",
              "      <th>운동량</th>\n",
              "      <th>탄소량</th>\n",
              "      <th>이동거리</th>\n",
              "      <th>이용시간</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>176.71</td>\n",
              "      <td>1.38</td>\n",
              "      <td>5949.60</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>120.28</td>\n",
              "      <td>1.08</td>\n",
              "      <td>4672.74</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>535.00</td>\n",
              "      <td>4.34</td>\n",
              "      <td>18764.02</td>\n",
              "      <td>570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>1097.91</td>\n",
              "      <td>9.42</td>\n",
              "      <td>40631.75</td>\n",
              "      <td>379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>178.77</td>\n",
              "      <td>1.51</td>\n",
              "      <td>6497.15</td>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2682fdea-5770-456f-9226-8c0305ce8573')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2682fdea-5770-456f-9226-8c0305ce8573 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2682fdea-5770-456f-9226-8c0305ce8573');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['이용건수'].hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "pT5SlTdREjek",
        "outputId": "376e084e-743c-4a56-ab51-cbac331e815b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f9f615744c0>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['이용건수'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L9TPiro0Emir",
        "outputId": "68eb373e-6e26-435b-aada-2ae60a5322fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1      3495\n",
              "2      2858\n",
              "3      1722\n",
              "4      1356\n",
              "5      1015\n",
              "       ... \n",
              "293       1\n",
              "225       1\n",
              "405       1\n",
              "357       1\n",
              "248       1\n",
              "Name: 이용건수, Length: 288, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['이용건수'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vmM2dW0TE183",
        "outputId": "28cbe333-d1e6-4475-e394-520f7bdb4cf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18.719635902545058"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['이용건수'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JcORQdcyGB8H",
        "outputId": "120b4e53-e6b8-4de3-d938-fa2d497bf6dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    22082.000000\n",
              "mean        18.719636\n",
              "std         34.591564\n",
              "min          1.000000\n",
              "25%          2.000000\n",
              "50%          6.000000\n",
              "75%         20.000000\n",
              "max        662.000000\n",
              "Name: 이용건수, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.query('이용건수 <= 10')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "BNEU8KEYFNDJ",
        "outputId": "826adee0-d8ab-4beb-f5f2-c6856049c5f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       월  대여소번호           대여소명  대여구분  성별  연령대코드  이용건수      운동량    탄소량  \\\n",
              "0      1    800    800. 목월공원 앞     0   1      4     2   176.71   1.38   \n",
              "1      1    800    800. 목월공원 앞     1   0      0     2   120.28   1.08   \n",
              "2      1    800    800. 목월공원 앞     2   0      1     6   535.00   4.34   \n",
              "4      1    800    800. 목월공원 앞     2   0      3     5   178.77   1.51   \n",
              "5      1    800    800. 목월공원 앞     2   0      0     2    44.29   0.40   \n",
              "...   ..    ...            ...   ...  ..    ...   ...      ...    ...   \n",
              "22075  6   4639  4639. 동빙고근린공원     3   1      1     8   496.80   4.18   \n",
              "22077  6   4639  4639. 동빙고근린공원     3   1      3     8   686.79   5.67   \n",
              "22079  6   4639  4639. 동빙고근린공원     3   1      5     9  1600.71  14.41   \n",
              "22080  6   4639  4639. 동빙고근린공원     3   1      6     1    37.39   0.32   \n",
              "22081  6   4639  4639. 동빙고근린공원     3   1      0     3   374.98   2.72   \n",
              "\n",
              "           이동거리  이용시간  \n",
              "0       5949.60   120  \n",
              "1       4672.74    58  \n",
              "2      18764.02   570  \n",
              "4       6497.15   140  \n",
              "5       1720.82   119  \n",
              "...         ...   ...  \n",
              "22075  18026.65   164  \n",
              "22077  24405.69   344  \n",
              "22079  62087.24   459  \n",
              "22080   1388.41     9  \n",
              "22081  11740.54   106  \n",
              "\n",
              "[13645 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f30a0635-d948-40f1-bc73-d0137ed5a4b3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>월</th>\n",
              "      <th>대여소번호</th>\n",
              "      <th>대여소명</th>\n",
              "      <th>대여구분</th>\n",
              "      <th>성별</th>\n",
              "      <th>연령대코드</th>\n",
              "      <th>이용건수</th>\n",
              "      <th>운동량</th>\n",
              "      <th>탄소량</th>\n",
              "      <th>이동거리</th>\n",
              "      <th>이용시간</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>176.71</td>\n",
              "      <td>1.38</td>\n",
              "      <td>5949.60</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>120.28</td>\n",
              "      <td>1.08</td>\n",
              "      <td>4672.74</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>535.00</td>\n",
              "      <td>4.34</td>\n",
              "      <td>18764.02</td>\n",
              "      <td>570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>178.77</td>\n",
              "      <td>1.51</td>\n",
              "      <td>6497.15</td>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>44.29</td>\n",
              "      <td>0.40</td>\n",
              "      <td>1720.82</td>\n",
              "      <td>119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22075</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>496.80</td>\n",
              "      <td>4.18</td>\n",
              "      <td>18026.65</td>\n",
              "      <td>164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22077</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>686.79</td>\n",
              "      <td>5.67</td>\n",
              "      <td>24405.69</td>\n",
              "      <td>344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22079</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>1600.71</td>\n",
              "      <td>14.41</td>\n",
              "      <td>62087.24</td>\n",
              "      <td>459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22080</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>37.39</td>\n",
              "      <td>0.32</td>\n",
              "      <td>1388.41</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22081</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>374.98</td>\n",
              "      <td>2.72</td>\n",
              "      <td>11740.54</td>\n",
              "      <td>106</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>13645 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f30a0635-d948-40f1-bc73-d0137ed5a4b3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f30a0635-d948-40f1-bc73-d0137ed5a4b3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f30a0635-d948-40f1-bc73-d0137ed5a4b3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data2 = data.groupby('대여소번호').agg(sum_use = ('이용건수', 'sum'))\n",
        "data2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "iNz7AvbxGoPY",
        "outputId": "3462d2b4-f1ac-4c9b-b6a8-957afeac3ce1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       sum_use\n",
              "대여소번호         \n",
              "800       5829\n",
              "802       2601\n",
              "803        901\n",
              "805       6411\n",
              "806       5111\n",
              "...        ...\n",
              "4634      3220\n",
              "4636       498\n",
              "4637       156\n",
              "4638       203\n",
              "4639       308\n",
              "\n",
              "[90 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d97016c-8889-42b8-b2bf-5046f0b8416c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sum_use</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>대여소번호</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>800</th>\n",
              "      <td>5829</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>802</th>\n",
              "      <td>2601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>803</th>\n",
              "      <td>901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>805</th>\n",
              "      <td>6411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>806</th>\n",
              "      <td>5111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4634</th>\n",
              "      <td>3220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4636</th>\n",
              "      <td>498</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4637</th>\n",
              "      <td>156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4638</th>\n",
              "      <td>203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4639</th>\n",
              "      <td>308</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>90 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d97016c-8889-42b8-b2bf-5046f0b8416c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8d97016c-8889-42b8-b2bf-5046f0b8416c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8d97016c-8889-42b8-b2bf-5046f0b8416c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data2.sort_values(by = 'sum_use', ascending = False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "1zXt_k3BHWY3",
        "outputId": "8a67724c-b798-4d95-adc7-3a902f46f799"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       sum_use\n",
              "대여소번호         \n",
              "853      21689\n",
              "870      18253\n",
              "825      15597\n",
              "837      12362\n",
              "829      12305\n",
              "...        ...\n",
              "865        509\n",
              "4636       498\n",
              "4639       308\n",
              "4638       203\n",
              "4637       156\n",
              "\n",
              "[90 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a1582a09-42e7-43ff-be4d-8009f7d73d77\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sum_use</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>대여소번호</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>853</th>\n",
              "      <td>21689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>870</th>\n",
              "      <td>18253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>825</th>\n",
              "      <td>15597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>837</th>\n",
              "      <td>12362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>829</th>\n",
              "      <td>12305</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>865</th>\n",
              "      <td>509</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4636</th>\n",
              "      <td>498</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4639</th>\n",
              "      <td>308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4638</th>\n",
              "      <td>203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4637</th>\n",
              "      <td>156</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>90 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a1582a09-42e7-43ff-be4d-8009f7d73d77')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a1582a09-42e7-43ff-be4d-8009f7d73d77 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a1582a09-42e7-43ff-be4d-8009f7d73d77');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# label = 대여구분코드 0/1 제외"
      ],
      "metadata": {
        "id": "uQkxkESCLEP2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Random Forest"
      ],
      "metadata": {
        "id": "71zW-4KeRvOb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "YAfki02dJ3Mt",
        "outputId": "9a5c0a81-6725-428d-a9a8-e6725cf84970"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       월  대여소번호           대여소명  대여구분  성별  연령대코드  이용건수      운동량    탄소량  \\\n",
              "0      1    800    800. 목월공원 앞     0   1      4     2   176.71   1.38   \n",
              "1      1    800    800. 목월공원 앞     1   0      0     2   120.28   1.08   \n",
              "2      1    800    800. 목월공원 앞     2   0      1     6   535.00   4.34   \n",
              "3      1    800    800. 목월공원 앞     2   0      2    14  1097.91   9.42   \n",
              "4      1    800    800. 목월공원 앞     2   0      3     5   178.77   1.51   \n",
              "...   ..    ...            ...   ...  ..    ...   ...      ...    ...   \n",
              "22077  6   4639  4639. 동빙고근린공원     3   1      3     8   686.79   5.67   \n",
              "22078  6   4639  4639. 동빙고근린공원     3   1      4    15  2900.89  22.47   \n",
              "22079  6   4639  4639. 동빙고근린공원     3   1      5     9  1600.71  14.41   \n",
              "22080  6   4639  4639. 동빙고근린공원     3   1      6     1    37.39   0.32   \n",
              "22081  6   4639  4639. 동빙고근린공원     3   1      0     3   374.98   2.72   \n",
              "\n",
              "           이동거리  이용시간  \n",
              "0       5949.60   120  \n",
              "1       4672.74    58  \n",
              "2      18764.02   570  \n",
              "3      40631.75   379  \n",
              "4       6497.15   140  \n",
              "...         ...   ...  \n",
              "22077  24405.69   344  \n",
              "22078  96820.20   566  \n",
              "22079  62087.24   459  \n",
              "22080   1388.41     9  \n",
              "22081  11740.54   106  \n",
              "\n",
              "[22082 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6044d613-a5e8-4b76-84b4-504e172a72a4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>월</th>\n",
              "      <th>대여소번호</th>\n",
              "      <th>대여소명</th>\n",
              "      <th>대여구분</th>\n",
              "      <th>성별</th>\n",
              "      <th>연령대코드</th>\n",
              "      <th>이용건수</th>\n",
              "      <th>운동량</th>\n",
              "      <th>탄소량</th>\n",
              "      <th>이동거리</th>\n",
              "      <th>이용시간</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>176.71</td>\n",
              "      <td>1.38</td>\n",
              "      <td>5949.60</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>120.28</td>\n",
              "      <td>1.08</td>\n",
              "      <td>4672.74</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>535.00</td>\n",
              "      <td>4.34</td>\n",
              "      <td>18764.02</td>\n",
              "      <td>570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>1097.91</td>\n",
              "      <td>9.42</td>\n",
              "      <td>40631.75</td>\n",
              "      <td>379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>178.77</td>\n",
              "      <td>1.51</td>\n",
              "      <td>6497.15</td>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22077</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>686.79</td>\n",
              "      <td>5.67</td>\n",
              "      <td>24405.69</td>\n",
              "      <td>344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22078</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>15</td>\n",
              "      <td>2900.89</td>\n",
              "      <td>22.47</td>\n",
              "      <td>96820.20</td>\n",
              "      <td>566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22079</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>1600.71</td>\n",
              "      <td>14.41</td>\n",
              "      <td>62087.24</td>\n",
              "      <td>459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22080</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>37.39</td>\n",
              "      <td>0.32</td>\n",
              "      <td>1388.41</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22081</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>374.98</td>\n",
              "      <td>2.72</td>\n",
              "      <td>11740.54</td>\n",
              "      <td>106</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>22082 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6044d613-a5e8-4b76-84b4-504e172a72a4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6044d613-a5e8-4b76-84b4-504e172a72a4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6044d613-a5e8-4b76-84b4-504e172a72a4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = data.drop(index = data[data['대여구분'] == 0].index)\n",
        "data = data.drop(index = data[data['대여구분'] == 1].index)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "j1RSErN2N0fR",
        "outputId": "b9a64f6d-c880-4365-aa0b-d1231d769c9c"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       월  대여소번호           대여소명  대여구분  성별  연령대코드  이용건수      운동량    탄소량  \\\n",
              "2      1    800    800. 목월공원 앞     2   0      1     6   535.00   4.34   \n",
              "3      1    800    800. 목월공원 앞     2   0      2    14  1097.91   9.42   \n",
              "4      1    800    800. 목월공원 앞     2   0      3     5   178.77   1.51   \n",
              "5      1    800    800. 목월공원 앞     2   0      0     2    44.29   0.40   \n",
              "6      1    800    800. 목월공원 앞     2   2      3     5   609.95   5.96   \n",
              "...   ..    ...            ...   ...  ..    ...   ...      ...    ...   \n",
              "22077  6   4639  4639. 동빙고근린공원     3   1      3     8   686.79   5.67   \n",
              "22078  6   4639  4639. 동빙고근린공원     3   1      4    15  2900.89  22.47   \n",
              "22079  6   4639  4639. 동빙고근린공원     3   1      5     9  1600.71  14.41   \n",
              "22080  6   4639  4639. 동빙고근린공원     3   1      6     1    37.39   0.32   \n",
              "22081  6   4639  4639. 동빙고근린공원     3   1      0     3   374.98   2.72   \n",
              "\n",
              "           이동거리  이용시간  연령구분  \n",
              "2      18764.02   570     0  \n",
              "3      40631.75   379     1  \n",
              "4       6497.15   140     1  \n",
              "5       1720.82   119     0  \n",
              "6      25690.59   247     1  \n",
              "...         ...   ...   ...  \n",
              "22077  24405.69   344     1  \n",
              "22078  96820.20   566     0  \n",
              "22079  62087.24   459     0  \n",
              "22080   1388.41     9     0  \n",
              "22081  11740.54   106     0  \n",
              "\n",
              "[19634 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a1003f6-0c5c-447c-8741-81b148358fcb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>월</th>\n",
              "      <th>대여소번호</th>\n",
              "      <th>대여소명</th>\n",
              "      <th>대여구분</th>\n",
              "      <th>성별</th>\n",
              "      <th>연령대코드</th>\n",
              "      <th>이용건수</th>\n",
              "      <th>운동량</th>\n",
              "      <th>탄소량</th>\n",
              "      <th>이동거리</th>\n",
              "      <th>이용시간</th>\n",
              "      <th>연령구분</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>535.00</td>\n",
              "      <td>4.34</td>\n",
              "      <td>18764.02</td>\n",
              "      <td>570</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>1097.91</td>\n",
              "      <td>9.42</td>\n",
              "      <td>40631.75</td>\n",
              "      <td>379</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>178.77</td>\n",
              "      <td>1.51</td>\n",
              "      <td>6497.15</td>\n",
              "      <td>140</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>44.29</td>\n",
              "      <td>0.40</td>\n",
              "      <td>1720.82</td>\n",
              "      <td>119</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>800</td>\n",
              "      <td>800. 목월공원 앞</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>609.95</td>\n",
              "      <td>5.96</td>\n",
              "      <td>25690.59</td>\n",
              "      <td>247</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22077</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>686.79</td>\n",
              "      <td>5.67</td>\n",
              "      <td>24405.69</td>\n",
              "      <td>344</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22078</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>15</td>\n",
              "      <td>2900.89</td>\n",
              "      <td>22.47</td>\n",
              "      <td>96820.20</td>\n",
              "      <td>566</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22079</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>1600.71</td>\n",
              "      <td>14.41</td>\n",
              "      <td>62087.24</td>\n",
              "      <td>459</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22080</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>37.39</td>\n",
              "      <td>0.32</td>\n",
              "      <td>1388.41</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22081</th>\n",
              "      <td>6</td>\n",
              "      <td>4639</td>\n",
              "      <td>4639. 동빙고근린공원</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>374.98</td>\n",
              "      <td>2.72</td>\n",
              "      <td>11740.54</td>\n",
              "      <td>106</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>19634 rows × 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a1003f6-0c5c-447c-8741-81b148358fcb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4a1003f6-0c5c-447c-8741-81b148358fcb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4a1003f6-0c5c-447c-8741-81b148358fcb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['대여구분'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t-iNg-NUMOg3",
        "outputId": "f83c935f-305c-4542-b51e-f4a3ea227477"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3    11077\n",
              "2     8557\n",
              "Name: 대여구분, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = data[['월', '대여소번호','성별', '이용건수', '운동량', '탄소량', '이동거리', '이용시간']]\n",
        "y = data['대여구분']"
      ],
      "metadata": {
        "id": "G7PbZV_XOtQc"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# train / test 데이터셋 나누기\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test=train_test_split(X, y, stratify=y, random_state=42)"
      ],
      "metadata": {
        "id": "0eAush_POtQd"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "604b22de-8b2a-48cc-9f5c-dd7a482a08bd",
        "id": "rm4lf6T2OtQd"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(14725, 8) (4909, 8) (14725,) (4909,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from scipy.stats import randint\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "param_distribs = {'n_estimators': randint(low=100, high=1000), \n",
        "                  'max_features': ['auto', 'sqrt', 'log2']}\n",
        "random_search=RandomizedSearchCV(RandomForestClassifier(), param_distributions = param_distribs, cv=5, return_train_score=True)"
      ],
      "metadata": {
        "id": "-Rfb3WncN_IZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random_search.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bd8f8ac9-c39e-4e0b-ab3f-47a402aa79c0",
        "id": "99-nL_qDOH4q"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(),\n",
              "                   param_distributions={'max_features': ['auto', 'sqrt',\n",
              "                                                         'log2'],\n",
              "                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f9f60a5e100>},\n",
              "                   return_train_score=True)"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best Parameter: {}\".format(random_search.best_params_))\n",
        "print(\"Best Cross-validity Score: {:.3f}\".format(random_search.best_score_))\n",
        "print(\"Test set Score: {:.3f}\".format(random_search.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b4062b24-e925-4855-b15a-c2dbfe4a5460",
        "id": "B0BBPOrTOH4t"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameter: {'max_features': 'log2', 'n_estimators': 555}\n",
            "Best Cross-validity Score: 0.701\n",
            "Test set Score: 0.698\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result_random = random_search.cv_results_"
      ],
      "metadata": {
        "id": "8R3gmKo4OH4u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(result_random['param_max_features'], \n",
        "         result_random['mean_train_score'], label=\"Train\")\n",
        "plt.plot(result_random['param_max_features'], \n",
        "         result_random['mean_test_score'], label=\"Test\")\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "3ee8c31b-f092-4157-fbe9-c6f40e1ff234",
        "id": "vT6ATeyUOH4v"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f9f6120c580>"
            ]
          },
          "metadata": {},
          "execution_count": 175
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(result_random['param_n_estimators'], \n",
        "         result_random['mean_train_score'], label=\"Train\")\n",
        "plt.plot(result_random['param_n_estimators'], \n",
        "         result_random['mean_test_score'], label=\"Test\")\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "0a456ed5-841a-420a-9817-64a7b17f53dd",
        "id": "eqYMDVsvOH4x"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f9f609c9610>"
            ]
          },
          "metadata": {},
          "execution_count": 176
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 변수 중요도 시각화\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "Forest=RandomForestClassifier(max_features='log2', n_estimators=478)\n",
        "Forest.fit(X_train, y_train)\n",
        "print(\"특성 중요도:\\n{}\".format(Forest.feature_importances_))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "28aa2a2c-2895-4ac2-f50e-ecda4cac5101",
        "id": "UX2_EjKAOH4y"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "특성 중요도:\n",
            "[0.06081003 0.12891336 0.02813582 0.17515478 0.15281666 0.126667\n",
            " 0.14213794 0.18536441]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "def plot_feature_importances_Forest(model):\n",
        "    n_features = X.shape[1]\n",
        "    plt.barh(range(n_features), model.feature_importances_, align='center')\n",
        "    plt.yticks(np.arange(n_features), X.columns)\n",
        "    plt.xlabel(\"Importance\")\n",
        "    plt.ylabel(\"Features\")\n",
        "    plt.ylim(-1, n_features)\n",
        "plot_feature_importances_Forest(Forest)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "9767bbcf-c3dc-4261-f9f0-1b6e3bae18ed",
        "id": "e4vC9s_BOH4z"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 모델평가\n",
        "from sklearn.metrics import confusion_matrix\n",
        "pred_train=Forest.predict(X_train)\n",
        "confusion_train=confusion_matrix(y_train, pred_train)\n",
        "print(\"훈련데이터 오차행렬:\\n\", confusion_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b52c6729-9349-4c92-e039-b0c5cf38a58a",
        "id": "CX95VPyKOH41"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "훈련데이터 오차행렬:\n",
            " [[6418    0]\n",
            " [   0 8307]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred_test=Forest.predict(X_test)\n",
        "confusion_test=confusion_matrix(y_test, pred_test)\n",
        "print(\"테스트 데이터 오차행렬:\\n\", confusion_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a281b74-f979-4829-9653-1259e18043a4",
        "id": "KCMLVW2fOH42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "테스트 데이터 오차행렬:\n",
            " [[1437  702]\n",
            " [ 790 1980]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import f1_score\n",
        "f1=f1_score(y_test, pred_test, average=\"micro\" )\n",
        "f2=f1_score(y_test, pred_test, average=\"macro\" )\n",
        "print(\"micro f1 score:\\n\", f1)\n",
        "print(\"macro f1 score:\\n\", f2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ff8fba89-69f1-4d69-844f-fdb6fb19aaa0",
        "id": "I3oVAGTYOH43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "micro f1 score:\n",
            " 0.6960684457119576\n",
            "macro f1 score:\n",
            " 0.6923036980549696\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "cfreport=classification_report(y_test, pred_test)\n",
        "print(\"분류예측 레포트:\\n\", cfreport)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "18719950-0085-4265-9f64-3ee73b05d50a",
        "id": "iBmOSwc0OH44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "분류예측 레포트:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           2       0.65      0.67      0.66      2139\n",
            "           3       0.74      0.71      0.73      2770\n",
            "\n",
            "    accuracy                           0.70      4909\n",
            "   macro avg       0.69      0.69      0.69      4909\n",
            "weighted avg       0.70      0.70      0.70      4909\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rf = RandomForestClassifier(random_state=0)\n",
        "rf.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "55EpyfTtS7JH",
        "outputId": "2c9f28c0-5f48-460e-e4ac-4b6a7b0cb77e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred = rf.predict(X_test)\n",
        "accuracy = accuracy_score(y_test,pred)"
      ],
      "metadata": {
        "id": "w7Dak7_eUHSo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uwrBESl_UHN9",
        "outputId": "755f98d4-b169-4461-97c9-b968d372ce40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6917905887146059"
            ]
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Gradient Boosting"
      ],
      "metadata": {
        "id": "il8ZEUu9SxZ3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "# 기본값은 max_depth= 3, n_estimators=100, learning_rate = 0.1\n",
        "\n",
        "gbrt = GradientBoostingClassifier(random_state=0)\n",
        "gbrt.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "Pl_ZZjMySxZ4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5b10b4fe-bd83-4bfd-9bf4-5eae85befbac"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GradientBoostingClassifier(random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"학습용 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_train, y_train))) # 과적합\n",
        "print(\"시험용 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da1202f3-844f-4f35-baf5-ada3c2574cdf",
        "id": "FhA3JnlOSxZ5"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "학습용 데이터 세트 정확도: 0.716\n",
            "시험용 데이터 세트 정확도: 0.685\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result = gbrt.feature_importances_\n",
        "print(\"변수의 중요도:\\n\", result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "02c0ae5f-8f3d-4b24-9059-ebc6b966e663",
        "id": "olPa9sf9SxZ6"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "변수의 중요도:\n",
            " [0.05021755 0.0240756  0.03032373 0.52630149 0.0288445  0.02412066\n",
            " 0.03675824 0.27935821]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "def plot_feature_importances_gbrt(model):\n",
        "    n_features = X.shape[1]\n",
        "    plt.barh(range(n_features), model.feature_importances_, align='center')\n",
        "    plt.yticks(np.arange(n_features), X.columns)\n",
        "    plt.xlabel(\"Importance\")\n",
        "    plt.ylabel(\"Features\")\n",
        "    plt.ylim(-1, n_features)\n",
        "plot_feature_importances_gbrt(gbrt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "18f5cac4-9b88-40d3-f346-686324545cad",
        "id": "3qv4-q3USxZ7"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 나무 깊이 제한\n",
        "gbrt = GradientBoostingClassifier(random_state=0, max_depth=5)\n",
        "gbrt.fit(X_train, y_train)\n",
        "\n",
        "print(\"학습 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_train, y_train)))\n",
        "print(\"시험용 데이터 세트 정확도: {:.3f}\".format(gbrt.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1fba633f-ba06-4f41-a50f-64e20bbbc040",
        "id": "PQ-bgyvESxZ7"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "학습 데이터 세트 정확도: 0.776\n",
            "시험용 데이터 세트 정확도: 0.705\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.metrics import confusion_matrix \n",
        "gbrt_pred = gbrt.predict(X_test)\n",
        "print('Gradient boosting 시험용 데이터 세트 정확도:{:.3f}'.format(accuracy_score(y_test, gbrt_pred)))\n",
        "print(confusion_matrix(y_test, gbrt_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8eb08fc8-6622-4bba-f252-58eb0661ad6d",
        "id": "G2MMrvtnSxZ8"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gradient boosting 시험용 데이터 세트 정확도:0.705\n",
            "[[1517  622]\n",
            " [ 825 1945]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test, gbrt_pred))"
      ],
      "metadata": {
        "id": "q0g3zNQoSxZ9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a69e3c55-81ed-41fd-a16d-cbd4bcdb6e5d"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           2       0.65      0.71      0.68      2139\n",
            "           3       0.76      0.70      0.73      2770\n",
            "\n",
            "    accuracy                           0.71      4909\n",
            "   macro avg       0.70      0.71      0.70      4909\n",
            "weighted avg       0.71      0.71      0.71      4909\n",
            "\n"
          ]
        }
      ]
    }
  ]
}
